<apex:page sidebar="false" showChat="false" showHeader="false" standardStylesheets="false">
    <html lang="en">
    <head>
      <meta charset="utf-8"/>
      <meta http-equiv="x-ua-compatible" content="ie=edge"/>
      <meta name="viewport" content="width=device-width, initial-scale=1"/>
      <link rel="stylesheet" href="{!URLFOR($Resource.CroperFiles, 'cropperjs-master/dist/cropper.css')}"/>
      <style>
        .container {
          max-width: 960px;
          margin: 20px auto;
        }
    
        .img-container {
          width: 100%;
          margin-top: 10px;
        }
    
        .img-container img {
          max-width: 100%;
        }
      </style>
    </head>
    <body>
    
      <div class="container">
        <h1>Cropper with a range of aspect ratio</h1>
        <div class="img-container">
          <img src="{!URLFOR($Resource.CroperFiles, 'cropperjs-master/assets/img/picture.jpg')}" alt="Picture"/>
        </div>
      </div>
     <button type="button" id="button">Crop</button>
     <div id="result"></div>
      <script src="{!URLFOR($Resource.CroperFiles, 'cropperjs-master/dist/cropper.js')}"></script>
      <script>
        (function () {
            window.addEventListener('DOMContentLoaded', function () {
                var image = document.querySelector('.img-container > img');
                var minAspectRatio = 0.5;
                var maxAspectRatio = 1.5;
                var croppable = false;
                var button = document.getElementById('button');
                var result = document.getElementById('result');
                var cropper = new Cropper(image, {
                built: function () {
                  var cropper = this.cropper;
                  var containerData = cropper.getContainerData();
                  var cropBoxData = cropper.getCropBoxData();
                  var aspectRatio = cropBoxData.width / cropBoxData.height;
                  var newCropBoxWidth;
        
                  if (aspectRatio < minAspectRatio || aspectRatio > maxAspectRatio) {
                    newCropBoxWidth = cropBoxData.height * ((minAspectRatio + maxAspectRatio) / 2);
        
                    cropper.setCropBoxData({
                      left: (containerData.width - newCropBoxWidth) / 2,
                      width: newCropBoxWidth
                    });
                  }
                },
                cropmove: function () {
                  var cropper = this.cropper;
                  var cropBoxData = cropper.getCropBoxData();
                  var imageData = cropper.getImageData();
                  var CroppedImage = document.createElement('img');
                  console.log('--> ' + JSON.stringify(imageData));
                  CroppedImage.src = imageData;
                  result.innerHTML = '';
                  result.appendChild(CroppedImage);
                  console.log(' -- > ' + cropBoxData);
                  var aspectRatio = cropBoxData.width / cropBoxData.height;
        
                  if (aspectRatio < minAspectRatio) {
                    cropper.setCropBoxData({
                      width: cropBoxData.height * minAspectRatio
                    });
                  } else if (aspectRatio > maxAspectRatio) {
                    cropper.setCropBoxData({
                      width: cropBoxData.height * maxAspectRatio
                    });
                  }
                }
              });
            });
        })();  
      </script>
    </body>
    </html>
</apex:page>