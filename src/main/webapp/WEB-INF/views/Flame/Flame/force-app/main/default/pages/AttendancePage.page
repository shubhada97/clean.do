<apex:page lightningStylesheets="true" controller="AttendancePageClass">
    <apex:stylesheet value="{!URLFOR($Resource.fullcalendar,'fullcalendar/fullcalendar.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.fullcalendar,'fullcalendar/jquery-ui.min.css')}"/>
    <apex:includeScript value="{!URLFOR($Resource.fullcalendar,'/fullcalendar/jquery.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.fullcalendar,'/fullcalendar/jquery-ui.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.fullcalendar,'/fullcalendar/moment.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.fullcalendar,'/fullcalendar/fullcalendar.min.js')}"/>
    
    <!--apex:includeScript value="{!$Resource.FullCalendarDemo}"/-->
    
    <html>
        <head>
            <style>
                
                .fc-event-container{
                overflow: hidden;
                }
                .vf-header {
                padding-left: 20px;
                background-color: lightgrey;
                padding-top: 5px;
                padding-bottom: 5px;
                font-weight: bold;
                }
                .vf-input-element {
                margin-left: 20px;
                }
                .fc-time {
                display: none;
                }
                .fc-day .ui-widget-content{
                width: 30px !important;
                height: 30px !important;
                }
                ::-webkit-scrollbar { 
                display: none; 
                }
                
                .fc-event {
                font-size: 0.9em;
                }
                .vf-header {
                padding-left: 0px;
                border-radius: 16px;
                }
                
                .ui-button{
                background-color: #f3cf71 !important;
                }
                @media screen and (max-width: 800px){
                .calendarClass {
                width:99% !important;
                }
                .fc-scroller { 
                height: 383.667px !important;
                }
                
                .fc-center{
                margin-top: 7px !important;
                }
                .fc-toolbar>*>:first-child {
                margin-left: 0px !important;
                }
                .fc-event {
                font-size: 0.7em;
                }
                }
                -fc-title{
                
                }
                .fc-today {
                background-color: #e9eddc !important;
                opacity: 1;
                }
            </style>
        </head>
        
        <body>
            
            <div id='calendar' class="calendarClass" style="width:90%; padding:10px; padding-top:20px;"></div>
            <div>
                
                
            </div>
            <div id='updateEvent' style="width:52%;z-index: 999;margin-top: -297px;position: relative; display:none">
                <div class="vf-header">
                    <center>
                        <output type="text" id="updateEventTitle" style="margin:5px"/><br/>
                        <div id='punchestimes' style="color: rgb(120, 119, 119);">
                            
                            <span>In Time :</span>
                            <output type="text" id="updateStartTime" style="margin:5px"/>
                            <br/>
                            <span>Out Time :</span>
                            <output type="text" id="updateEndTime" style="margin:5px"/>
                            
                        </div>
                    </center>
                    
                </div>
            </div>
            
            <script>
            
            function attendanceFunc(){
                
                var fcContent = document.getElementsByClassName('fc-content');
                for (item of fcContent) {
                    //console.log(item.innerText.split('\n')[0]);
                    if(item.innerText.split('\n')[0] == 'Present'){
                        item.style.backgroundColor='#8bd99d';
                    }
                    else if(item.innerText.split('\n')[0] == 'Absent'){
                        item.style.backgroundColor='#fa5353';
                    }
                    else if(item.innerText.split('\n')[0] == 'Half Day Present'){
               		    item.style.backgroundColor='yellow';
                    }
                    else if(item.innerText.split('\n')[0] == 'Half Day Leave'){
                    	item.style.backgroundColor='rgb(220, 151, 255)';
                    }
                    else if(item.innerText.split('\n')[0] == 'Full Day Leave'){
                    	item.style.backgroundColor='rgb(220, 151, 255)';
                    }
         			else if(item.innerText.split('\n')[0] == 'Sunday' || item.innerText.split('\n')[0] == 'Saturday off' || item.innerText.split('\n')[0] == 'Saturday OFF' ){
                    	item.style.backgroundColor='#f3cf71';
                    } 
                    else{
                    	item.style.backgroundColor='#a3c8f5';
					}
                }
            }
            
            $(document).click(function(event) {
                if($(event.target)[0].outerHTML.substring(0,23) != '<span class="fc-title">'){
                    document.getElementById('updateEvent').style.display = 'none';
                }
            });
            
            $( document ).ready(function() {
                //Attach Listeners
                attachListners();
                //Initialize calendar
                const calendar = CalendarSingleton.getCalendar();
                //Get user's events
                getEvents(calendar);
                
                //$( "#createStartTime,#createEndTime,#updateStartTime,#updateEndTime" ).datepicker();
                
                var fcright = [1,2];
                
                fcright.forEach(function(event){
                    document.getElementsByClassName('fc-right')[0].remove();
                });
                
                $(".ui-button").on('click', function(event){
                    attendanceFunc();
                });
            });
            
            function getEvents(){
                //Invoking remote action
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.AttendancePageClass.getEvents}',
                    function(result, event){
                        if (event.status) {
                            //Call was successful, add events to calendar
                            addEvents(result, calendar);
                        } else if (event.type === 'exception') {
                            //Exception in remote call
                            console.error(`${event.message} ${event.where}`);
                        } else {
                            //Call was unsuccssful
                            console.error(`${event.message}`);
                        }
                    }, 
                    {escape: true}
                );
            }
            
            /**
             * Initializing fullcalendar with appropriate option and handlers
             * using Singleton Pattern 
             **/
            const CalendarSingleton = (function(){
                let calendarInstance;
                
                function createCalendar(){
                    //Initialize Full Calender
                    //and render inside 'calendar' div
                    const calendar = $('#calendar').fullCalendar({
                        
                        //Toolbar header
                        header: {
                            left:   'prev,next today',
                            center: 'title',
                            right: 'agendaDay,agendaWeek,month'
                        },
                        
                        //Changing text for different buttons
                        buttonText :{
                            today:    'Today',
                            month:    'Month',
                            week:     'Week Agenda',
                            day:      'Day Agenda',
                            list:     'List',
                            prevYear: 'Previous Year',
                            nextYear: 'Next Year',
                            prev: 'Previous',
                            next: 'Next'
                        },
                        //Toolbar footer with previous year and next year controls
                        footer: {
                            right: 'prevYear, nextYear'
                        },
                        
                        themeSystem: 'jquery-ui',
                        aspectRatio: 2,
                        selectable:true,
                        
                        
                        //dayClick handler
                        select : function(start, end) {
                            //alert('a day has been clicked!');
                            handleSelect(start, end);
                            $("#dialog").dialog();
                        },
                        
                        //Handle event click
                        eventClick : function(calendarEvent, browserEvent, view){
                            handleEventClick(calendarEvent, browserEvent, view);
                        },
                        
                        //Hanadle drag-drop of event
                        eventDrop: function(event, delta, revertFunc) {
                            //alert(event.title + " was dropped on " + event.start.format());
                            if (!confirm("Are you sure about this change?")) {
                                revertFunc();
                            } else{
                                handleEventDrop(event); 
                            }
                        }
                    });
                    
                    return calendar;
                }
                
                return {
                    getCalendar : function(){
                        if(!calendarInstance){
                            calendarInstance = createCalendar();
                        }
                        return calendarInstance;
                    },
                }
            })();
            
            const addEvents = function(eventsData){
                const events = [];
                eventsData.forEach(function(event){
                    
                    const newEvent = {};
                    newEvent.Id = event.rType;
                    
                    if(event.rType == 'H'){
                        newEvent.title  = event.name;
                        newEvent.start = new Date(event.sDate).toISOString();
                        newEvent.end = new Date(event.eDate).toISOString();
                    }
                    else{
                        if(event.name == 'Present' || event.name == 'Absent' || event.name == 'Half Day Present'){
                            //console.log(event.sDate == event.eDate);
                            if(event.sDate == event.eDate){
                                newEvent.title  = event.name +' \n '+'In Time: 00:00 \n '+' Out Time: 00:00';
                            }
                            else{
                                newEvent.title  = event.name +' \n '+'In Time: '+new Date(event.sDate).toLocaleTimeString()+' \n '+' Out Time: '+new Date(event.eDate).toLocaleTimeString();
                            }
                            
                            
                        }
                        else{
                            newEvent.title  = event.name;
                        }                        
                        
                        // newEvent.start = new Date(event.sDate).toLocaleString();
                        // newEvent.end = new Date(event.eDate).toLocaleString();
                        newEvent.start = new Date(event.sDate);
                        newEvent.end = new Date(event.eDate);
                    }
                    newEvent.editable  = false;
                    events.push(newEvent);
                    
                });
                if(events.length > 0){
                    $('#calendar').fullCalendar('removeEventSources');
                    $('#calendar').fullCalendar('addEventSource', events);
                }
                
                attendanceFunc();
            }
            
            /**
             * This function will be called when the user
             * click on an event
             **/
            const handleEventClick = function(calendarEvent, browserEvent, view){
                $('#updateEvent').css("display", "block");
                var titleName = calendarEvent.title.split('\n')[0].trim();
                if(titleName == 'Present' || titleName == 'Absent' || titleName == 'Half Day Present'){
                    $('#punchestimes').css("display", "block");
                }
                else{
                    $('#punchestimes').css("display", "none");
                }
                $('#updateEventTitle').val(calendarEvent.title.split('\n')[0]);
                $('#updateStartTime').val(calendarEvent.title.split('\n')[1].split(': ')[1]);//(calendarEvent.start);
                $('#updateEndTime').val(calendarEvent.title.split('\n')[2].split(': ')[1]);//(calendarEvent.end);
                $('#recordId').val(calendarEvent.Id);
                $("#dialog").dialog( "close" );
            }
            
            /**
         * This function will be called when the user
         * select a duration from the calendar
         **/
        const handleSelect = function(start, end){
            $('#createEventTitle').val("");
            $('#createStartTime').val(start);
            $('#createEndTime').val(end);
        }
        
        /**
 * Prepare an event object to pass to server side remote call
 * */
const prepareEvent = function(title, startTime, endTime, Id){
    const calendarEvent = {};
    calendarEvent.Id = Id;
    calendarEvent.Name = title;
    calendarEvent.Start_Time__c = new Date(startTime).getTime();
    calendarEvent.End_Time__c = new Date(endTime).getTime();
    createOrUpdateEvents(JSON.stringify(calendarEvent));
}

/**
 * This method will be called when event is drag and dropped
 **/
const handleEventDrop = function(event){
    const calendarEvent = {};
    calendarEvent.Id = event.Id;
    calendarEvent.Name = event.title;
    calendarEvent.Start_Time__c = new Date(event.start).getTime();
    calendarEvent.End_Time__c = new Date(event.end).getTime();
    createOrUpdateEvents(JSON.stringify(calendarEvent));
}

/**
 * This code will be executed on page load
 * and will attach necessary listeners
 **/
const attachListners = function(){
    
    /**
     * Adding submit event listener on newEventForm
     **/
    $('#newEventForm').submit(function(event){
        const title = $('#createEventTitle').val();
        const startTime = $('#createStartTime').val();
        const endTime = $('#createEndTime').val();
        if(new Date(startTime).getTime() > new Date(endTime).getTime()){
            $("#createStartTime").after('<span style="color:red"><br>Start time must be before End time</span>');
        }
        prepareEvent(title, startTime, endTime);
        $("#dialog").dialog( "close" );
        event.preventDefault();
    });
    
    /**
     * Adding submit event listener on updateEventForm
     **/
    $('#updateEventForm').submit(function(event){
        const title = $('#updateEventTitle').val();
        const startTime = $('#updateStartTime').val();
        const endTime = $('#updateEndTime').val();
        const Id = $('#recordId').val();
        if(new Date(startTime).getTime() > new Date(endTime).getTime()){
            $("#updateStartTime").after('<span style="color:red"><br>Start time must be before End time</span>');
        }
        prepareEvent(title, startTime, endTime, Id);
        event.preventDefault();
    });
    
}

</script>
        </body>
    </html>
</apex:page>